- name: Download RHEL ISO Package 
  hosts: localhost
  vars_prompt:
    - name: offline_token
      prompt: What is your Offline Token? Leave this empty if you don't want to download ISOS (Check README)
      unsafe: yes
      private: no
  vars:
    rhel_version: 9
    checksum:
      rhel8: c324f3b07283f9393168f0a4ad2167ebbf7e4699d65c9670e0d9e58ba4e2a9a8
      rhel9: c6942e3ed65947ed48c30589d9c1a752e96c5b94ee8de1923331449fee162cc1
        
  tasks:
  - ansible.builtin.include_role:
      name: package-downloader
    vars:
      rh_product_filename: rhel.iso
      rh_product_checksum: "{{ checksum.rhel8 if ( rhel_version | int == 8 ) else checksum.rhel9 }}"
      rh_api_offline_token: "{{ offline_token }}"
    when: offline_token is defined and offline_token != ""

- name: This play provisions VMs for centos2rhel migration demos
  hosts: localhost
  become: true
  vars:
    network_cidr: 192.168.217.0/24
  vars_files:
    - vars.yml 
  tasks:
    - name: Ensure required packages are in place
      yum: 
        name: "{{ packages }}"

    - name: Ensure libvirtd is running
      ansible.builtin.service: 
        name: libvirtd
        state: started
        enabled: true

    - name: Ensure libvirt can use root as user
      replace:
        path: /etc/libvirt/qemu.conf
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      loop:
        - regexp: '#user = "root"'
          line: 'user = "root"'
        - regexp: '#group = "root"'
          line: 'group = "root"'

    - name: Restart libvirtd service
      ansible.builtin.service: 
        name: libvirtd
        state: restarted

    - name: Create required folders
      ansible.builtin.file:
        state: directory
        path: "{{ playbook_dir }}/terraform/kickstart/{{ item.instance }}"
        recurse: true
      loop: "{{ modules }}"

    - name: Create symbolic link to RHEL image
      ansible.builtin.file:
        src: "{{ playbook_dir }}/{{ item.instance }}.iso"
        dest: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.instance }}.iso"
        state: link
      loop: "{{ modules }}"
          
    - name: Create a 1Mib file to store kickstart 
      community.general.filesize:
        path: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.instance }}-oemdrv.img"
        size: 1MiB
      loop: "{{ modules }}"
                         
    - name: Generate kickstart from template
      ansible.builtin.template:
        src: ks.cfg.j2
        dest: "{{ playbook_dir }}/terraform/kickstart/{{ item.instance }}/ks.cfg"
      loop: "{{ modules }}"
      vars:
        hostname: "{{ item.hostname }}"
          
    - name: Rebuild Kickstart config
      community.general.filesystem:
        fstype: ext2
        dev: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.instance }}-oemdrv.img"
        opts: -d {{ playbook_dir }}/terraform/kickstart/{{ item.instance }} -L OEMDRV
        force: true
      loop: "{{ modules }}"

    - name: Provision all terraform resources
      community.general.terraform:
        project_path: "terraform/"
        force_init: true
        variables:
          network_cidr: ' ["{{ network_cidr }}"]'
        state: present

    - name: Add Local resolver for the domain
      ansible.builtin.copy:
        content: server=/rhel.labs/{{ network_cidr | next_nth_usable(1)}}
        dest: /etc/NetworkManager/dnsmasq.d/rhel.conf
      become: true
    
    - name: Restart NetworkManager to reload config
      ansible.builtin.service:
        name: NetworkManager
        state: restarted

    - name: Add servers to inventory
      ansible.builtin.add_host:
        hostname: "{{ item.hostname }}.{{ domain }}"
        ansible_user: root
        ansible_ssh_password: redhat
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups:
          - "servers"        
      loop: "{{ modules }}"

    - name: Ensure to clean known_hosts
      ansible.builtin.known_hosts:
        host: "{{ item }}"
        path: ~/.ssh/known_hosts
        state: absent
      become: false
      loop: "{{ groups['servers'] }}"

- name: Check connection to servers
  hosts: servers
  gather_facts: no
  tasks:
    - name: Waiting for installation to end, it can take time!
      wait_for_connection:
        timeout: 1800
        sleep: 120

    - ping:
    
    - name: Setup is ready
      debug:
        msg: "Setup completed, now you can proceed with post install steps"

